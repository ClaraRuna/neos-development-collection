diff --git a/Neos.Neos/Classes/Domain/Service/SiteService.php b/Neos.Neos/Classes/Domain/Service/SiteService.php
index c9ab62afcb321989c0c840a45ed8377768980ba5..3b722259ff02eac8b6ddf9533ed90bf1c04d5c61 100644
--- a/Neos.Neos/Classes/Domain/Service/SiteService.php
+++ b/Neos.Neos/Classes/Domain/Service/SiteService.php
@@ -12,7 +12,10 @@ namespace Neos\Neos\Domain\Service;
  */

 use Neos\ContentRepository\Domain\Model\NodeInterface;
+use Neos\EventSourcedContentRepository\Domain\Context\NodeAddress\NodeAddress;
+use Neos\EventSourcedNeosAdjustments\Domain\Context\Content\NodeSiteResolvingService;
 use Neos\Flow\Annotations as Flow;
+use Neos\Flow\Persistence\Exception\IllegalObjectTypeException;
 use Neos\Flow\Persistence\PersistenceManagerInterface;
 use Neos\Media\Domain\Model\Asset;
 use Neos\Media\Domain\Repository\AssetCollectionRepository;
@@ -53,6 +56,12 @@ class SiteService
      */
     protected $siteRepository;

+    /**
+     * @Flow\Inject
+     * @var NodeSiteResolvingService
+     */
+    protected $nodeSiteResolvingService;
+
     /**
      * @Flow\Inject
      * @var WorkspaceRepository
@@ -117,17 +126,17 @@ class SiteService
      * Note: This is usually triggered by the ContentController::assetUploaded signal
      *
      * @param Asset $asset
-     * @param NodeInterface $node
+     * @param NodeAddress $node
      * @param string $propertyName
      * @return void
      */
-    public function assignUploadedAssetToSiteAssetCollection(Asset $asset, NodeInterface $node, string $propertyName)
+    public function assignUploadedAssetToSiteAssetCollection(Asset $asset, NodeAddress $node, string $propertyName): void
     {
-        $contentContext = $node->getContext();
-        if (!$contentContext instanceof ContentContext) {
+        $siteNode = $this->nodeSiteResolvingService->findSiteNodeForNodeAddress($node);
+        if ($siteNode === null) {
             return;
         }
-        $site = $contentContext->getCurrentSite();
+        $site = $this->siteRepository->findOneByNodeName($siteNode->getNodeName());
         if ($site === null) {
             return;
         }
@@ -136,7 +145,11 @@ class SiteService
             return;
         }
         $assetCollection->addAsset($asset);
-        $this->assetCollectionRepository->update($assetCollection);
+        try {
+            $this->assetCollectionRepository->update($assetCollection);
+        } catch (IllegalObjectTypeException $e) {
+            // ðŸ‘»
+        }
     }

     /**
diff --git a/Neos.Neos/Classes/Controller/Backend/ContentController.php b/Neos.Neos/Classes/Controller/Backend/ContentController.php
index d42cbd7eda528373fa9ae5cdf5cd16dfddd9e71a..96661a0c0cdbbf1b7cedd3db951f756225d27732 100644
--- a/Neos.Neos/Classes/Controller/Backend/ContentController.php
+++ b/Neos.Neos/Classes/Controller/Backend/ContentController.php
@@ -13,6 +13,7 @@ namespace Neos\Neos\Controller\Backend;

 use Neos\ContentRepository\Domain\Model\NodeInterface;
 use Neos\Eel\FlowQuery\FlowQuery;
+use Neos\EventSourcedContentRepository\Domain\Context\NodeAddress\NodeAddress;
 use Neos\Flow\Annotations as Flow;
 use Neos\Flow\I18n\EelHelper\TranslationHelper;
 use Neos\Flow\Mvc\Controller\ActionController;
@@ -130,14 +131,13 @@ class ContentController extends ActionController
      *
      * @param Asset $asset
      * @param string $metadata Type of metadata to return ("Asset" or "Image")
-     * @param NodeInterface $node The node the new asset should be assigned to
+     * @param NodeAddress $node The node the new asset should be assigned to
      * @param string $propertyName The node property name the new asset should be assigned to
      * @return string
      * @throws IllegalObjectTypeException
-     * @throws \Neos\Flow\Persistence\Exception\IllegalObjectTypeException
      * @throws ThumbnailServiceException
      */
-    public function uploadAssetAction(Asset $asset, string $metadata, NodeInterface $node, string $propertyName)
+    public function uploadAssetAction(Asset $asset, string $metadata, NodeAddress $node, string $propertyName): string
     {
         $this->response->setContentType('application/json');
         if ($metadata !== 'Asset' && $metadata !== 'Image') {
@@ -417,12 +417,12 @@ class ContentController extends ActionController
      * Signals that a new asset has been uploaded through the Neos Backend
      *
      * @param Asset $asset The uploaded asset
-     * @param NodeInterface $node The node the asset belongs to
+     * @param NodeAddress $node The node the asset belongs to
      * @param string $propertyName The node property name the asset is assigned to
      * @return void
      * @Flow\Signal
      */
-    protected function emitAssetUploaded(Asset $asset, NodeInterface $node, string $propertyName)
+    protected function emitAssetUploaded(Asset $asset, NodeAddress $node, string $propertyName): void
     {
     }
 }
