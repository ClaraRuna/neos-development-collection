diff --git a/Classes/Command/NodeIndexCommandController.php b/Classes/Command/NodeIndexCommandController.php
index b91293e..b121d57 100644
--- a/Classes/Command/NodeIndexCommandController.php
+++ b/Classes/Command/NodeIndexCommandController.php
@@ -25,13 +25,15 @@ use Flowpack\ElasticSearch\ContentRepositoryAdaptor\Indexer\NodeIndexer;
 use Flowpack\ElasticSearch\ContentRepositoryAdaptor\Indexer\WorkspaceIndexer;
 use Flowpack\ElasticSearch\Domain\Model\Mapping;
 use Flowpack\ElasticSearch\Transfer\Exception\ApiException;
-use Neos\ContentRepository\Domain\Model\Workspace;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\ContentDimensionZookeeper;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
 use Neos\ContentRepository\Domain\Repository\NodeDataRepository;
-use Neos\ContentRepository\Domain\Repository\WorkspaceRepository;
-use Neos\ContentRepository\Domain\Service\ContentDimensionCombinator;
 use Neos\ContentRepository\Domain\Service\ContentDimensionPresetSourceInterface;
 use Neos\ContentRepository\Domain\Service\Context;
 use Neos\ContentRepository\Domain\Service\ContextFactoryInterface;
+use Neos\EventSourcedContentRepository\Domain\Projection\Workspace\Workspace;
+use Neos\EventSourcedContentRepository\Domain\Projection\Workspace\WorkspaceFinder;
+use Neos\EventSourcedContentRepository\Domain\ValueObject\WorkspaceName;
 use Neos\Flow\Annotations as Flow;
 use Neos\Flow\Cli\CommandController;
 use Neos\Flow\Cli\Exception\StopCommandException;
@@ -81,9 +83,9 @@ class NodeIndexCommandController extends CommandController
 
     /**
      * @Flow\Inject
-     * @var WorkspaceRepository
+     * @var WorkspaceFinder
      */
-    protected $workspaceRepository;
+    protected $workspaceFinder;
 
     /**
      * @Flow\Inject
@@ -123,9 +125,9 @@ class NodeIndexCommandController extends CommandController
 
     /**
      * @Flow\Inject
-     * @var ContentDimensionCombinator
+     * @var ContentDimensionZookeeper
      */
-    protected $contentDimensionCombinator;
+    protected $contentDimensionZookeeper;
 
     /**
      * @Flow\Inject
@@ -189,7 +191,7 @@ class NodeIndexCommandController extends CommandController
         };
 
         $indexInWorkspace = function ($identifier, Workspace $workspace) use ($indexNode) {
-            $combinations = $this->contentDimensionCombinator->getAllAllowedCombinations();
+            $combinations = $this->contentDimensionZookeeper->getAllowedCombinations();
 
             $results = [];
 
@@ -206,11 +208,11 @@ class NodeIndexCommandController extends CommandController
 
         if ($workspace === null) {
             /** @var Workspace $iteratedWorkspace */
-            foreach ($this->workspaceRepository->findAll() as $iteratedWorkspace) {
+            foreach ($this->workspaceFinder->findAll() as $iteratedWorkspace) {
                 $indexInWorkspace($identifier, $iteratedWorkspace);
             }
         } else {
-            $workspaceInstance = $this->workspaceRepository->findByIdentifier($workspace);
+            $workspaceInstance = $this->workspaceFinder->findOneByName(new WorkspaceName($workspace));
             if ($workspaceInstance === null) {
                 $this->outputLine('<error>Error: The given workspace (%s) does not exist.</error>', [$workspace]);
                 $this->quit(1);
@@ -221,7 +223,7 @@ class NodeIndexCommandController extends CommandController
         $this->nodeIndexer->flush();
 
         if ($updateAliases) {
-            $combinations = $this->contentDimensionCombinator->getAllAllowedCombinations();
+            $combinations = $this->contentDimensionZookeeper->getAllowedCombinations();
             $combinations = $combinations === [] ? [[]] : $combinations;
 
             foreach ($combinations as $combination) {
@@ -257,7 +259,7 @@ class NodeIndexCommandController extends CommandController
     {
         $this->logger->info(sprintf('Starting elasticsearch indexing %s sub processes', $this->useSubProcesses ? 'with' : 'without'), LogEnvironment::fromMethodName(__METHOD__));
 
-        if ($workspace !== null && $this->workspaceRepository->findByIdentifier($workspace) === null) {
+        if ($workspace !== null && $this->workspaceFinder->findOneByName(new WorkspaceName($workspace)) === null) {
             $this->logger->error('The given workspace (' . $workspace . ') does not exist.', LogEnvironment::fromMethodName(__METHOD__));
             $this->quit(1);
         }
@@ -265,7 +267,7 @@ class NodeIndexCommandController extends CommandController
         $postfix = (string)($postfix ?: time());
         $this->nodeIndexer->setIndexNamePostfix($postfix);
 
-        $createIndicesAndApplyMapping = function (array $dimensionsValues) use ($update, $postfix) {
+        $createIndicesAndApplyMapping = function (DimensionSpacePoint $dimensionsValues) use ($update, $postfix) {
             $this->executeInternalCommand('createInternal', [
                 'dimensionsValues' => json_encode($dimensionsValues),
                 'update' => $update,
@@ -273,18 +275,18 @@ class NodeIndexCommandController extends CommandController
             ]);
         };
 
-        $buildIndex = function (array $dimensionsValues) use ($workspace, $limit, $postfix) {
+        $buildIndex = function (DimensionSpacePoint $dimensionsValues) use ($workspace, $limit, $postfix) {
             $this->build($dimensionsValues, $workspace, $postfix, $limit);
         };
 
-        $refresh = function (array $dimensionsValues) use ($postfix) {
+        $refresh = function (DimensionSpacePoint $dimensionsValues) use ($postfix) {
             $this->executeInternalCommand('refreshInternal', [
                 'dimensionsValues' => json_encode($dimensionsValues),
                 'postfix' => $postfix,
             ]);
         };
 
-        $updateAliases = function (array $dimensionsValues) use ($update, $postfix) {
+        $updateAliases = function (DimensionSpacePoint $dimensionsValues) use ($update, $postfix) {
             $this->executeInternalCommand('aliasInternal', [
                 'dimensionsValues' => json_encode($dimensionsValues),
                 'postfix' => $postfix,
@@ -292,7 +294,7 @@ class NodeIndexCommandController extends CommandController
             ]);
         };
 
-        $combinations = new ArrayCollection($this->contentDimensionCombinator->getAllAllowedCombinations());
+        $combinations = new ArrayCollection($this->contentDimensionZookeeper->getAllowedDimensionSubspace()->getPoints());
 
         $runAndLog = function ($command, string $stepInfo) use ($combinations) {
             $timeStart = microtime(true);
@@ -344,7 +346,7 @@ class NodeIndexCommandController extends CommandController
     /**
      * Build up the node index
      *
-     * @param array $dimensionsValues
+     * @param DimensionSpacePoint $dimensionsValues
      * @param string|null $workspace
      * @param string|null $postfix
      * @param int|null $limit
@@ -353,7 +355,7 @@ class NodeIndexCommandController extends CommandController
      * @throws RuntimeException
      * @throws SubProcessException
      */
-    private function build(array $dimensionsValues, ?string $workspace = null, ?string $postfix = null, ?int $limit = null): void
+    private function build(DimensionSpacePoint $dimensionsValues, ?string $workspace = null, ?string $postfix = null, ?int $limit = null): void
     {
         $dimensionsValues = $this->configureNodeIndexer($dimensionsValues, $postfix);
 
@@ -363,9 +365,9 @@ class NodeIndexCommandController extends CommandController
             $workspace = 'live';
         }
 
-        $buildWorkspaceCommandOptions = static function ($workspace, array $dimensionsValues, ?int $limit, ?string $postfix) {
+        $buildWorkspaceCommandOptions = static function ($workspace, DimensionSpacePoint $dimensionsValues, ?int $limit, ?string $postfix) {
             return [
-                'workspace' => $workspace instanceof Workspace ? $workspace->getName() : $workspace,
+                'workspace' => $workspace instanceof Workspace ? $workspace->getWorkspaceName() : $workspace,
                 'dimensionsValues' => json_encode($dimensionsValues),
                 'postfix' => $postfix,
                 'limit' => $limit,
@@ -374,7 +376,7 @@ class NodeIndexCommandController extends CommandController
 
         $output = '';
         if ($workspace === null) {
-            foreach ($this->workspaceRepository->findAll() as $iteratedWorkspace) {
+            foreach ($this->workspaceFinder->findAll() as $iteratedWorkspace) {
                 $output .= $this->executeInternalCommand('buildWorkspaceInternal', $buildWorkspaceCommandOptions($iteratedWorkspace, $dimensionsValues, $limit, $postfix));
             }
         } else {
@@ -412,7 +414,7 @@ class NodeIndexCommandController extends CommandController
         if ($update === true) {
             $this->logger->warning('!!! Update Mode (Development) active!', LogEnvironment::fromMethodName(__METHOD__));
         } else {
-            $dimensionsValuesArray = $this->configureNodeIndexer(json_decode($dimensionsValues, true), $postfix);
+            $dimensionsValuesArray = $this->configureNodeIndexer(DimensionSpacePoint::fromJsonString($dimensionsValues), $postfix);
             if ($this->nodeIndexer->getIndex()->exists() === true) {
                 $this->logger->warning(sprintf('Deleted index with the same postfix (%s)!', $postfix), LogEnvironment::fromMethodName(__METHOD__));
                 $this->nodeIndexer->getIndex()->delete();
@@ -435,7 +437,7 @@ class NodeIndexCommandController extends CommandController
      */
     public function buildWorkspaceInternalCommand(string $workspace, string $dimensionsValues, string $postfix, int $limit = null): void
     {
-        $dimensionsValuesArray = $this->configureNodeIndexer(json_decode($dimensionsValues, true), $postfix);
+        $dimensionsValuesArray = $this->configureNodeIndexer(DimensionSpacePoint::fromJsonString($dimensionsValues), $postfix);
 
         $workspaceLogger = function ($workspaceName, $indexedNodes, $dimensions) {
             if ($dimensions === []) {
@@ -464,7 +466,7 @@ class NodeIndexCommandController extends CommandController
      */
     public function refreshInternalCommand(string $dimensionsValues, string $postfix): void
     {
-        $this->configureNodeIndexer(json_decode($dimensionsValues, true), $postfix);
+        $this->configureNodeIndexer(DimensionSpacePoint::fromJsonString($dimensionsValues), $postfix);
 
         $this->logger->info(vsprintf('Refreshing index %s', [$this->nodeIndexer->getIndexName()]), LogEnvironment::fromMethodName(__METHOD__));
         $this->nodeIndexer->getIndex()->refresh();
@@ -487,7 +489,7 @@ class NodeIndexCommandController extends CommandController
         if ($update === true) {
             return;
         }
-        $this->configureNodeIndexer(json_decode($dimensionsValues, true), $postfix);
+        $this->configureNodeIndexer(DimensionSpacePoint::fromJsonString($dimensionsValues), $postfix);
 
         $this->logger->info(vsprintf('Update alias for index %s', [$this->nodeIndexer->getIndexName()]), LogEnvironment::fromMethodName(__METHOD__));
         $this->nodeIndexer->updateIndexAlias();
@@ -499,7 +501,7 @@ class NodeIndexCommandController extends CommandController
      * @param string $postfix
      * @return array
      */
-    private function configureNodeIndexer(array $dimensionsValues, string $postfix): array
+    private function configureNodeIndexer(DimensionSpacePoint $dimensionsValues, string $postfix): DimensionSpacePoint
     {
         $this->nodeIndexer->setIndexNamePostfix($postfix);
         $this->nodeIndexer->setDimensions($dimensionsValues);
@@ -516,7 +518,7 @@ class NodeIndexCommandController extends CommandController
     public function cleanupCommand(): void
     {
         $removed = false;
-        $combinations = $this->contentDimensionCombinator->getAllAllowedCombinations();
+        $combinations = $this->contentDimensionZookeeper->getAllowedCombinations();
         foreach ($combinations as $dimensionsValues) {
             try {
                 $this->nodeIndexer->setDimensions($dimensionsValues);
diff --git a/Classes/ElasticSearchClient.php b/Classes/ElasticSearchClient.php
index a8ce910..11cfffe 100644
--- a/Classes/ElasticSearchClient.php
+++ b/Classes/ElasticSearchClient.php
@@ -18,6 +18,7 @@ use Flowpack\ElasticSearch\ContentRepositoryAdaptor\Service\DimensionsService;
 use Flowpack\ElasticSearch\ContentRepositoryAdaptor\Service\IndexNameStrategyInterface;
 use Flowpack\ElasticSearch\Domain\Model\Client;
 use Flowpack\ElasticSearch\Domain\Model\Index;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
 use Neos\ContentRepository\Domain\Model\NodeInterface;
 use Neos\Flow\Annotations as Flow;
 
@@ -75,9 +76,9 @@ class ElasticSearchClient extends Client
     /**
      * @param array $dimensionValues
      */
-    public function setDimensions(array $dimensionValues = []): void
+    public function setDimensions(DimensionSpacePoint $dimensionValues): void
     {
-        $this->dimensionsHash = $this->dimensionsService->hash($dimensionValues);
+        $this->dimensionsHash = $dimensionValues->getHash();
     }
 
     /**
diff --git a/Classes/Indexer/NodeIndexer.php b/Classes/Indexer/NodeIndexer.php
index 2d2283f..78e06cf 100644
--- a/Classes/Indexer/NodeIndexer.php
+++ b/Classes/Indexer/NodeIndexer.php
@@ -30,11 +30,13 @@ use Flowpack\ElasticSearch\ContentRepositoryAdaptor\Service\NodeTypeIndexingConf
 use Flowpack\ElasticSearch\Domain\Model\Document as ElasticSearchDocument;
 use Flowpack\ElasticSearch\Domain\Model\Index;
 use Flowpack\ElasticSearch\Transfer\Exception\ApiException;
-use Neos\ContentRepository\Domain\Model\NodeInterface;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
 use Neos\ContentRepository\Domain\Service\Context;
 use Neos\ContentRepository\Domain\Service\ContextFactoryInterface;
 use Neos\ContentRepository\Search\Indexer\AbstractNodeIndexer;
 use Neos\ContentRepository\Search\Indexer\BulkNodeIndexerInterface;
+use Neos\EventSourcedContentRepository\Domain\Context\NodeAddress\NodeAddressFactory;
+use Neos\EventSourcedContentRepository\Domain\Projection\Content\NodeInterface;
 use Neos\Flow\Annotations as Flow;
 use Neos\Flow\Persistence\Exception\IllegalObjectTypeException;
 use Neos\Utility\Exception\FilesException;
@@ -159,7 +161,13 @@ class NodeIndexer extends AbstractNodeIndexer implements BulkNodeIndexerInterfac
      */
     protected $errorStorage;
 
-    public function setDimensions(array $dimensionsValues): void
+    /**
+     * @Flow\Inject
+     * @var NodeAddressFactory
+     */
+    protected $nodeAddressFactory;
+
+    public function setDimensions(DimensionSpacePoint $dimensionsValues): void
     {
         $this->searchClient->setDimensions($dimensionsValues);
     }
@@ -225,7 +233,7 @@ class NodeIndexer extends AbstractNodeIndexer implements BulkNodeIndexerInterfac
     public function indexNode(NodeInterface $node, $targetWorkspaceName = null): void
     {
         if ($this->nodeTypeIndexingConfiguration->isIndexable($node->getNodeType()) === false) {
-            $this->logger->debug(sprintf('Node "%s" (%s) skipped, Node Type is not allowed in the index.', $node->getContextPath(), $node->getNodeType()), LogEnvironment::fromMethodName(__METHOD__));
+            $this->logger->debug(sprintf('Node "%s" (%s) skipped, Node Type is not allowed in the index.', $node->getNodeAggregateIdentifier(), $node->getNodeType()), LogEnvironment::fromMethodName(__METHOD__));
             return;
         }
 
@@ -238,7 +246,8 @@ class NodeIndexer extends AbstractNodeIndexer implements BulkNodeIndexerInterfac
                     return;
                 }
 
-                if ($targetWorkspaceName === null && $node->getContext()->getWorkspaceName() !== 'live') {
+
+                if ($targetWorkspaceName === null && !$this->nodeAddressFactory->createFromNode($node)->isInLiveWorkspace()) {
                     return;
                 }
             }
@@ -278,7 +287,7 @@ class NodeIndexer extends AbstractNodeIndexer implements BulkNodeIndexerInterfac
                     $indexer($nodeFromContext, $targetWorkspaceName);
                 }, $nodeFromContext->getContext()->getTargetDimensions());
             } else {
-                if ($node->isRemoved()) {
+                if (false /* TODO $node->isRemoved()*/) {
                     $this->removeNode($node, $context->getWorkspaceName());
                     $this->logger->debug(sprintf('Removed node with identifier %s, no longer in workspace %s', $node->getIdentifier(), $context->getWorkspaceName()), LogEnvironment::fromMethodName(__METHOD__));
                 } else {
diff --git a/Classes/Indexer/WorkspaceIndexer.php b/Classes/Indexer/WorkspaceIndexer.php
index 56a8278..91678b1 100644
--- a/Classes/Indexer/WorkspaceIndexer.php
+++ b/Classes/Indexer/WorkspaceIndexer.php
@@ -13,11 +13,16 @@ namespace Flowpack\ElasticSearch\ContentRepositoryAdaptor\Indexer;
  * source code.
  */
 
-use Neos\ContentRepository\Domain\Factory\NodeFactory;
-use Neos\ContentRepository\Domain\Model\NodeInterface;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
+use Neos\ContentRepository\Domain\NodeType\NodeTypeName;
 use Neos\ContentRepository\Domain\Service\ContentDimensionCombinator;
-use Neos\ContentRepository\Domain\Service\ContextFactoryInterface;
 use Neos\ContentRepository\Search\Indexer\NodeIndexingManager;
+use Neos\EventSourcedContentRepository\ContentAccess\NodeAccessorManager;
+use Neos\EventSourcedContentRepository\Domain\Context\Parameters\VisibilityConstraints;
+use Neos\EventSourcedContentRepository\Domain\Projection\Content\ContentGraphInterface;
+use Neos\EventSourcedContentRepository\Domain\Projection\Content\NodeInterface;
+use Neos\EventSourcedContentRepository\Domain\Projection\Workspace\WorkspaceFinder;
+use Neos\EventSourcedContentRepository\Domain\ValueObject\WorkspaceName;
 use Neos\Flow\Annotations as Flow;
 
 /**
@@ -27,12 +32,6 @@ use Neos\Flow\Annotations as Flow;
  */
 final class WorkspaceIndexer
 {
-    /**
-     * @var ContextFactoryInterface
-     * @Flow\Inject
-     */
-    protected $contextFactory;
-
     /**
      * @var ContentDimensionCombinator
      * @Flow\Inject
@@ -46,10 +45,22 @@ final class WorkspaceIndexer
     protected $nodeIndexingManager;
 
     /**
-     * @var NodeFactory
+     * @var NodeAccessorManager
+     * @Flow\Inject
+     */
+    protected $nodeAccessorManager;
+
+    /**
+     * @var WorkspaceFinder
      * @Flow\Inject
      */
-    protected $nodeFactory;
+    protected $workspaceFinder;
+
+    /**
+     * @var ContentGraphInterface
+     * @Flow\Inject
+     */
+    protected $contentGraph;
 
     /**
      * @param string $workspaceName
@@ -79,17 +90,21 @@ final class WorkspaceIndexer
      * @param callable $callback
      * @return int
      */
-    public function indexWithDimensions(string $workspaceName, array $dimensions = [], $limit = null, callable $callback = null): int
+    public function indexWithDimensions(string $workspaceName, DimensionSpacePoint $dimensions = null, $limit = null, callable $callback = null): int
     {
-        $context = $this->contextFactory->create([
-            'workspaceName' => $workspaceName,
-            'dimensions' => $dimensions,
-            'invisibleContentShown' => true
-        ]);
-        $rootNode = $context->getRootNode();
+        $workspace = $this->workspaceFinder->findOneByName(new WorkspaceName($workspaceName));
+        $dimensionSpacePoint = $dimensions;
+
+        // TODO: invisibleContentShown = TRUE ==> VisibilityConstraints::withoutRestrictions()??
+        $nodeAccessor = $this->nodeAccessorManager->accessorFor($workspace->getCurrentContentStreamIdentifier(), $dimensionSpacePoint, VisibilityConstraints::frontend());
+
+        // we assume that the ROOT node is always stored in the CR as "physical" node; so it is safe
+        // to call the contentGraph here directly.
+        $rootNodeAggregate = $this->contentGraph->findRootNodeAggregateByType($workspace->getCurrentContentStreamIdentifier(), NodeTypeName::fromString('Neos.Neos:Sites'));
+        $rootNode = $rootNodeAggregate->getNodeByCoveredDimensionSpacePoint($dimensionSpacePoint);
         $indexedNodes = 0;
 
-        $traverseNodes = function (NodeInterface $currentNode, &$indexedNodes) use ($limit, &$traverseNodes) {
+        $traverseNodes = function (NodeInterface $currentNode, &$indexedNodes) use ($limit, &$traverseNodes, $nodeAccessor) {
             if ($limit !== null && $indexedNodes > $limit) {
                 return;
             }
@@ -99,14 +114,11 @@ final class WorkspaceIndexer
 
             array_map(function (NodeInterface $childNode) use ($traverseNodes, &$indexedNodes) {
                 $traverseNodes($childNode, $indexedNodes);
-            }, $currentNode->getChildNodes());
+            }, $nodeAccessor->findChildNodes($currentNode)->getArrayCopy());
         };
 
         $traverseNodes($rootNode, $indexedNodes);
 
-        $this->nodeFactory->reset();
-        $context->getFirstLevelNodeCache()->flush();
-
         $this->nodeIndexingManager->flushQueues();
 
         if ($callback !== null) {
diff --git a/Classes/Service/DimensionsService.php b/Classes/Service/DimensionsService.php
index 71be3a6..95802ab 100644
--- a/Classes/Service/DimensionsService.php
+++ b/Classes/Service/DimensionsService.php
@@ -13,9 +13,10 @@ namespace Flowpack\ElasticSearch\ContentRepositoryAdaptor\Service;
  * source code.
  */
 
-use Neos\ContentRepository\Domain\Model\NodeInterface;
+use Neos\ContentRepository\DimensionSpace\DimensionSpace\DimensionSpacePoint;
 use Neos\ContentRepository\Domain\Service\ContentDimensionCombinator;
 use Neos\ContentRepository\Utility;
+use Neos\EventSourcedContentRepository\Domain\Projection\Content\NodeInterface;
 use Neos\Flow\Annotations as Flow;
 
 /**
@@ -99,19 +100,19 @@ class DimensionsService
      */
     public function getDimensionCombinationsForIndexing(NodeInterface $node): array
     {
-        $dimensionsHash = $this->hash($node->getDimensions());
+        $dimensionsHash = $node->getDimensionSpacePoint()->getHash();
 
         if (!isset($this->dimensionCombinationsForIndexing[$dimensionsHash])) {
             $this->dimensionCombinationsForIndexing[$dimensionsHash] = $this->reduceDimensionCombinationstoSelfAndFallback(
                 $this->contentDimensionCombinator->getAllAllowedCombinations(),
-                $node->getDimensions()
+                $node->getDimensionSpacePoint()
             );
         }
 
         return $this->dimensionCombinationsForIndexing[$dimensionsHash];
     }
 
-    protected function reduceDimensionCombinationstoSelfAndFallback(array $dimensionCombinations, array $nodeDimensions): array
+    protected function reduceDimensionCombinationstoSelfAndFallback(array $dimensionCombinations, DimensionSpacePoint $nodeDimensions): array
     {
         return array_filter($dimensionCombinations, static function (array $dimensionCombination) use ($nodeDimensions) {
             foreach ($dimensionCombination as $dimensionKey => $dimensionValues) {
